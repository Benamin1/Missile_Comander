!function(Q){var U={};function F(B){if(U[B])return U[B].exports;var s=U[B]={i:B,l:!1,exports:{}};return Q[B].call(s.exports,s,s.exports,F),s.l=!0,s.exports}F.m=Q,F.c=U,F.d=function(Q,U,B){F.o(Q,U)||Object.defineProperty(Q,U,{enumerable:!0,get:B})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,U){if(1&U&&(Q=F(Q)),8&U)return Q;if(4&U&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(F.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&U&&"string"!=typeof Q)for(var s in Q)F.d(B,s,function(U){return Q[U]}.bind(null,s));return B},F.n=function(Q){var U=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(U,"a",U),U},F.o=function(Q,U){return Object.prototype.hasOwnProperty.call(Q,U)},F.p="public",F(F.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"Game\", function() { return /* binding */ src_Game; });\n\n// CONCATENATED MODULE: ./src/components/crosshair.ts\nclass Crosshair {\r\n    constructor(canvas) {\r\n        this.canvas = canvas;\r\n        this.x = 300;\r\n        this.y = 650;\r\n        this.a = 100;\r\n        this.img = new Image(); // Create new img element\r\n        this.img.src = '../src/assets/crosshair.png'; // Set source path\r\n        this.keyPressed = [];\r\n        document.addEventListener(\"keydown\", e => { if (!e.repeat)\r\n            this.pressed(e); }, false);\r\n        document.addEventListener(\"keyup\", e => { this.relased(e); }, false);\r\n        window.addEventListener('blur', e => { this.reset(); });\r\n        document.addEventListener('mousemove', e => {\r\n            this.x = e.clientX;\r\n            if (e.clientY < this.canvas.height - 100) {\r\n                this.y = e.clientY;\r\n            }\r\n        });\r\n    }\r\n    pressed(data) {\r\n        this.keyPressed.push(data.key);\r\n    }\r\n    relased(data) {\r\n        this.keyPressed.splice(this.keyPressed.indexOf(data.key), 1);\r\n    }\r\n    reset() {\r\n        this.keyPressed = [];\r\n    }\r\n    movemeant() {\r\n        // this.y = e.clientY\r\n        // this.keyPressed.forEach(e=>{\r\n        //     if(e==\"ArrowUp\"&& this.y>0){\r\n        //             this.y-=10\r\n        //     }\r\n        //     if(e==\"ArrowDown\"&&this.y<this.canvas.height-150){\r\n        //         this.y+=10\r\n        //     }\r\n        //     if(e==\"ArrowLeft\"&&this.x>0){\r\n        //         this.x-=10\r\n        //     }\r\n        //     if(e==\"ArrowRight\"&&this.x<this.canvas.width-20){\r\n        //         this.x+=10\r\n        //     }\r\n        // })\r\n    }\r\n    draw(ctx) {\r\n        let that = this;\r\n        ctx.drawImage(this.img, this.x, this.y);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ground.ts\nclass Ground {\r\n    constructor(canvas) {\r\n        this.canvas = canvas;\r\n    }\r\n    draw(ctx) {\r\n        ctx.fillStyle = \"#b3762f\";\r\n        ctx.strokeStyle = \"orange\";\r\n        ctx.fillRect(0, this.canvas.height - 50, this.canvas.width, 50);\r\n        // ctx.moveTo(this.canvas.width/2-50, this.canvas.height-100);\r\n        // ctx.lineTo(this.canvas.width/2+50, this.canvas.height-100);\r\n        // ctx.lineTo(this.canvas.width/2+100, this.canvas.height-50);\r\n        // ctx.lineTo(this.canvas.width/2-100, this.canvas.height-50);\r\n        ctx.fill();\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/rocket.ts\nclass Rocket {\r\n    constructor(canvas, endX, endY) {\r\n        this.canvas = canvas;\r\n        this.endX = endX;\r\n        this.endY = endY;\r\n        // console.log(this.endX, this.endY)\r\n        this.startX = this.canvas.width / 2 + 2;\r\n        this.startY = this.canvas.height - 90;\r\n        this.x = this.startX;\r\n        this.y = this.startY;\r\n        this.state = 'launching';\r\n        // console.log(-(this.startY-this.endY)/(this.startX-this.endX))\r\n        // console.log(this.startY-this.endY)\r\n        this.target = new Image();\r\n        this.target.src = '../src/assets/target.png'; // Set source path\r\n        //obliczanie kąta\r\n        let dy = this.endY - this.startY;\r\n        let dx = this.endX - this.startX;\r\n        let direction = Math.atan(dy / dx);\r\n        direction *= 180 / Math.PI;\r\n        if (direction < 0) {\r\n            direction = direction + 180;\r\n        }\r\n        //wyliczanie przesunięcia w czasie klatki\r\n        this.dX = Math.cos(direction * Math.PI / 180);\r\n        if (this.dX == 0) {\r\n            this.dX += 1;\r\n        }\r\n        this.dY = Math.sin(direction * Math.PI / 180);\r\n        this.speed = 12;\r\n    }\r\n    draw(ctx) {\r\n        if (this.state == 'launching') {\r\n            ctx.drawImage(this.target, this.endX - 7, this.endY - 7);\r\n            ctx.strokeStyle = \"blue\";\r\n            ctx.lineWidth = 3;\r\n            ctx.beginPath();\r\n            ctx.moveTo(this.canvas.width / 2 + 2, this.canvas.height - 90);\r\n            ctx.lineTo(this.x, this.y);\r\n            ctx.stroke();\r\n            let distance = Math.sqrt(Math.abs(this.startX - this.endX) + Math.abs(this.startY - this.endY));\r\n            this.x -= this.dX * this.speed;\r\n            this.y -= this.dY * this.speed;\r\n        }\r\n        if (this.y < this.endY) {\r\n            this.state = 'stop';\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/explosion.ts\nclass Explosion {\r\n    constructor(canvas, x, y) {\r\n        this.canvas = canvas;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = 0;\r\n        this.expanding = true;\r\n        this.delete = false;\r\n        this.colorList = ['lightgreen', 'lightblue', 'lightpink', 'aqua', 'red'];\r\n        var audio = new Audio('../src/assets/explode.mp3');\r\n        audio.play();\r\n    }\r\n    draw(ctx, color) {\r\n        ctx.beginPath();\r\n        // console.log(color)\r\n        ctx.fillStyle = this.colorList[color];\r\n        // ctx.fillStyle = \r\n        ctx.strokeStyle = \"black\";\r\n        ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        if (this.expanding) {\r\n            this.radius += 0.4;\r\n            if (this.radius >= 50) {\r\n                this.expanding = false;\r\n            }\r\n        }\r\n        else {\r\n            this.radius -= 0.4;\r\n            if (this.radius <= 0) {\r\n                this.delete = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/enemy.ts\nclass Enemy {\r\n    constructor(canvas, type, startX, StartY, target, speed) {\r\n        this.canvas = canvas;\r\n        this.type = type;\r\n        this.startX = startX;\r\n        this.StartY = StartY;\r\n        this.target = target;\r\n        this.speed = speed;\r\n        this.targets = [[this.canvas.width / 20 * 1 + 50, 670], [this.canvas.width / 20 * 4 + 50, 670], [this.canvas.width / 20 * 7 + 50, 670], [this.canvas.width / 20 * 9 + 75, 640], [this.canvas.width - (this.canvas.width / 20 * 7) - 50, 670], [this.canvas.width - (this.canvas.width / 20 * 4) - 50, 670], [this.canvas.width - (this.canvas.width / 20 * 1) - 50, 670]];\r\n        this.hit = -1;\r\n        this.active = true;\r\n        this.split = false;\r\n        this.splited = false;\r\n        //obliczanie kąta i prędkości\r\n        this.x = this.startX;\r\n        this.y = this.StartY;\r\n        let dy = this.targets[target][1] - this.StartY;\r\n        let dx = this.targets[target][0] - this.startX;\r\n        this.direction = Math.atan(dy / dx);\r\n        this.direction *= 180 / Math.PI;\r\n        if (this.direction < 0) {\r\n            this.direction = this.direction + 180;\r\n        }\r\n        this.dX = Math.cos(this.direction * Math.PI / 180);\r\n        this.dY = Math.sin(this.direction * Math.PI / 180);\r\n        //właściwości\r\n        if (this.type == 'rocket' || this.type == 'cluster') {\r\n            // this.speed = 0.4\r\n        }\r\n        if (this.type == 'fast') {\r\n            this.speed *= 1.8;\r\n        }\r\n    }\r\n    check(ctx) {\r\n        var data = ctx.getImageData(this.x - 3, this.y - 3, 6, 6);\r\n        let sum = 0;\r\n        data.data.forEach(e => {\r\n            sum += e;\r\n        });\r\n        if (sum / data.data.length > 100) {\r\n            this.active = false;\r\n        }\r\n    }\r\n    draw(ctx) {\r\n        if (this.y > this.targets[this.target][1]) {\r\n            this.active = false;\r\n            this.hit = this.target;\r\n        }\r\n        if (this.type == 'cluster' && this.y > this.canvas.height / 3 && !this.splited) {\r\n            this.split = true;\r\n        }\r\n        ctx.strokeStyle = \"#FF7272\";\r\n        ctx.lineWidth = 3;\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.startX, this.StartY);\r\n        ctx.lineTo(this.x, this.y);\r\n        ctx.stroke();\r\n        ctx.strokeStyle = \"red\";\r\n        ctx.lineWidth = 3;\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.x - (this.dX * 4), this.y - (this.dY * 4));\r\n        ctx.lineTo(this.x, this.y);\r\n        ctx.stroke();\r\n        // ctx.strokeStyle  = \"red\"\r\n        // ctx.moveTo(this.x, this.x);\r\n        // ctx.lineTo(this.x, this.y);\r\n        ctx.stroke();\r\n        this.x += this.dX * this.speed;\r\n        this.y += this.dY * this.speed;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/city.ts\nclass City {\r\n    constructor(canvas, posX, posY) {\r\n        this.posX = posX;\r\n        this.posY = posY;\r\n        this.canvas = canvas;\r\n        this.city = new Image();\r\n        this.city.src = '../src/assets/city.png'; // Set source path\r\n        this.destroyed = false;\r\n    }\r\n    update(a) {\r\n    }\r\n    destroy() {\r\n        setTimeout(() => { this.city.src = '../src/assets/brokencity.png'; }, 1000);\r\n        this.destroyed = true;\r\n    }\r\n    draw(ctx) {\r\n        ctx.drawImage(this.city, this.posX + 50, this.posY);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/plane.ts\nclass Plane {\r\n    constructor(canvas, type, startX, StartY, speed) {\r\n        this.canvas = canvas;\r\n        this.type = type;\r\n        this.startX = startX;\r\n        this.StartY = StartY;\r\n        this.speed = speed;\r\n        var audio = new Audio('../src/assets/alert.mp3');\r\n        audio.play();\r\n        this.targets = [[this.canvas.width / 20 * 1 + 50, 670], [this.canvas.width / 20 * 4 + 50, 670], [this.canvas.width / 20 * 7 + 50, 670], [this.canvas.width - (this.canvas.width / 20 * 7) - 50, 670], [this.canvas.width - (this.canvas.width / 20 * 4) - 50, 670], [this.canvas.width - (this.canvas.width / 20 * 1) - 50, 670]];\r\n        if (this.startX > this.canvas.width / 2) {\r\n            this.speed *= -2;\r\n            this.reverse = true;\r\n        }\r\n        else {\r\n            this.speed *= 2;\r\n            this.reverse = false;\r\n        }\r\n        this.active = true;\r\n        this.x = this.startX;\r\n        this.y = this.StartY;\r\n        this.img = new Image();\r\n        if (this.type == 'covid') {\r\n            this.img.src = '../src/assets/covid.png';\r\n        }\r\n        else {\r\n            if (this.reverse) {\r\n                this.img.src = '../src/assets/planeReverse.png';\r\n            }\r\n            else {\r\n                this.img.src = '../src/assets/plane.png';\r\n            }\r\n        }\r\n        this.bomb = false;\r\n    }\r\n    check(ctx) {\r\n        let data = ctx.getImageData(this.x - 50, this.y - 40, 50, 30);\r\n        let sum = 0;\r\n        data.data.forEach(e => {\r\n            sum += e;\r\n        });\r\n        if (sum / data.data.length > 100) {\r\n            this.active = false;\r\n        }\r\n    }\r\n    draw(ctx) {\r\n        ctx.drawImage(this.img, this.x - 50, this.y - 50, 50, 50);\r\n        this.x += this.speed;\r\n        if (this.x > this.canvas.width + 150 || this.x < -150) {\r\n            this.active = false;\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/planeCorpse.ts\nclass PlaneCorpse {\r\n    constructor(canvas, startX, StartY, reverse) {\r\n        this.canvas = canvas;\r\n        this.startX = startX;\r\n        this.StartY = StartY;\r\n        this.reverse = reverse;\r\n        this.targets = [[this.canvas.width / 20 * 1 + 50, 670], [this.canvas.width / 20 * 4 + 50, 670], [this.canvas.width / 20 * 7 + 50, 670], [this.canvas.width - (this.canvas.width / 20 * 7) - 50, 670], [this.canvas.width - (this.canvas.width / 20 * 4) - 50, 670], [this.canvas.width - (this.canvas.width / 20 * 1) - 50, 670]];\r\n        this.active = true;\r\n        this.x = this.startX;\r\n        this.y = this.StartY;\r\n        this.img = new Image();\r\n        if (this.reverse) {\r\n            this.img.src = '../src/assets/planeCorpseReverse.png';\r\n        }\r\n        else {\r\n            this.img.src = '../src/assets/planeCorpse.png';\r\n        }\r\n        this.bomb = false;\r\n        setTimeout(() => { this.active = false; }, 500);\r\n    }\r\n    draw(ctx) {\r\n        ctx.drawImage(this.img, this.x - 50, this.y - 50, 50, 50);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/drone.ts\nclass Drone {\r\n    constructor(canvas, startX, StartY, target, speed) {\r\n        this.canvas = canvas;\r\n        this.startX = startX;\r\n        this.StartY = StartY;\r\n        this.target = target;\r\n        this.speed = speed;\r\n        this.targets = [[this.canvas.width / 20 * 1 + 30, 670], [this.canvas.width / 20 * 4 + 30, 670], [this.canvas.width / 20 * 7 + 30, 670], [this.canvas.width / 20 * 9 + 55, 640], [this.canvas.width - (this.canvas.width / 20 * 7) - 60, 670], [this.canvas.width - (this.canvas.width / 20 * 4) - 60, 670], [this.canvas.width - (this.canvas.width / 20 * 1) - 60, 670]];\r\n        this.speed *= 1.5;\r\n        this.active = true;\r\n        this.x = this.startX;\r\n        this.y = this.StartY;\r\n        this.img = new Image();\r\n        this.img.src = '../src/assets/drone.png';\r\n        this.direction = 0;\r\n        this.hit = -1;\r\n        var audio = new Audio('../src/assets/alert.mp3');\r\n        audio.play();\r\n    }\r\n    check(ctx) {\r\n        this.dy = this.targets[this.target][1] - this.y;\r\n        this.dx = this.targets[this.target][0] - this.x;\r\n        this.direction = Math.atan(this.dy / this.dx);\r\n        this.direction *= 180 / Math.PI;\r\n        if (this.direction < 0) {\r\n            this.direction = this.direction + 180;\r\n        }\r\n        var data = ctx.getImageData(this.x, this.y, 28, 18);\r\n        let sum = 0;\r\n        data.data.forEach(e => {\r\n            sum += e;\r\n        });\r\n        if (sum / data.data.length > 100) {\r\n            this.active = false;\r\n        }\r\n        let danger = [];\r\n        //evasions\r\n        if (this.y < 600) {\r\n            //check down\r\n            var data = ctx.getImageData(this.x - 10, this.y + 10, 50, 90);\r\n            sum = 0;\r\n            data.data.forEach(e => {\r\n                sum += e;\r\n            });\r\n            if (sum / data.data.length > 100) {\r\n                danger.push('down');\r\n                // this.direction=270\r\n                // this.direction+=180\r\n            }\r\n            //check right\r\n            var data = ctx.getImageData(this.x + 20, this.y, 60, 30);\r\n            sum = 0;\r\n            data.data.forEach(e => {\r\n                sum += e;\r\n            });\r\n            if (sum / data.data.length > 100) {\r\n                // this.direction+=90\r\n                danger.push('right');\r\n            }\r\n            //check left\r\n            var data = ctx.getImageData(this.x + 10, this.y, -60, 30);\r\n            sum = 0;\r\n            data.data.forEach(e => {\r\n                sum += e;\r\n            });\r\n            if (sum / data.data.length > 120) {\r\n                this.direction -= 90;\r\n                danger.push('left');\r\n            }\r\n            //check leftDown\r\n            var data = ctx.getImageData(this.x, this.y + 20, -40, 40);\r\n            sum = 0;\r\n            data.data.forEach(e => {\r\n                sum += e;\r\n            });\r\n            if (sum / data.data.length > 100) {\r\n                this.direction -= 90;\r\n                danger.push('leftDown');\r\n            }\r\n            //check rightDown\r\n            var data = ctx.getImageData(this.x + 70, this.y + 20, -40, 40);\r\n            sum = 0;\r\n            data.data.forEach(e => {\r\n                sum += e;\r\n            });\r\n            if (sum / data.data.length > 100) {\r\n                this.direction -= 90;\r\n                danger.push('rightDown');\r\n            }\r\n            // ctx.fillStyle = \"orange\";\r\n            // ctx.fillRect(this.x+13,this.y+9,2,2);\r\n            if (danger.includes('rightDown') && !danger.includes('leftDown')) {\r\n                this.direction = 225;\r\n            }\r\n            else if (!danger.includes('rightDown') && danger.includes('leftDown')) {\r\n                this.direction = 315;\r\n            }\r\n            else if (danger.includes('down')) {\r\n                this.direction = 270;\r\n            }\r\n            else if (danger.includes('rightDown') && danger.includes('leftDown')) {\r\n                this.direction = 270;\r\n            }\r\n            else if (danger.includes('left') && !danger.includes('right')) {\r\n                this.direction = 0;\r\n            }\r\n            else if (!danger.includes('left') && danger.includes('right')) {\r\n                this.direction = 180;\r\n            }\r\n        }\r\n    }\r\n    draw(ctx) {\r\n        ctx.drawImage(this.img, this.x, this.y, 30, 18);\r\n        this.dx = Math.cos(this.direction * Math.PI / 180);\r\n        this.dy = Math.sin(this.direction * Math.PI / 180);\r\n        this.x += this.dx * this.speed;\r\n        this.y += this.dy * this.speed;\r\n        if (this.y > this.targets[this.target][1]) {\r\n            this.active = false;\r\n            this.hit = this.target;\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/base.ts\nclass Base {\r\n    constructor(canvas, posX, posY, missles) {\r\n        this.posX = posX;\r\n        this.posY = posY;\r\n        this.missles = missles;\r\n        this.canvas = canvas;\r\n        this.city = new Image();\r\n        this.city.src = '../src/assets/base.png'; // Set source path\r\n        this.destroyed = false;\r\n        this.missle = new Image();\r\n        this.missle.src = '../src/assets/rocket.png'; // Set source path\r\n    }\r\n    destroy() {\r\n        setTimeout(() => {\r\n            this.city.src = '../src/assets/baseDestroyed.png';\r\n            this.posY -= 1;\r\n            this.destroyed = true;\r\n        }, 2000);\r\n    }\r\n    update(a) {\r\n        this.missles = a;\r\n    }\r\n    draw(ctx) {\r\n        let list = [[this.posX + 120, this.posY + 10, 18, 20], [this.posX + 100, this.posY + 30, 18, 20], [this.posX + 140, this.posY + 30, 18, 20], [this.posX + 120, this.posY + 50, 18, 20], [this.posX + 80, this.posY + 50, 18, 20], [this.posX + 160, this.posY + 50, 18, 20]];\r\n        ctx.drawImage(this.city, this.posX + 70, this.posY + 10, 120, 67);\r\n        if (!this.destroyed) {\r\n            for (let i = 0; i < this.missles; i++) {\r\n                ctx.drawImage(this.missle, list[i][0], list[i][1], list[i][2], list[i][3]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass src_Game {\r\n    constructor() {\r\n        this.lost = false;\r\n        this.speed = 0.5;\r\n        this.message = '';\r\n        this.points = 0;\r\n        this.usedMissles = 0;\r\n        this.missles = 6;\r\n        this.canvas = document.createElement('canvas');\r\n        this.resize();\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        document.getElementById('main').appendChild(this.canvas);\r\n        this.crosshair = new Crosshair(this.canvas);\r\n        this.cities = [new City(this.canvas, this.canvas.width / 20 * 1 - 50, 650), new City(this.canvas, this.canvas.width / 20 * 4 - 50, 650), new City(this.canvas, this.canvas.width / 20 * 7 - 50, 650), new Base(this.canvas, this.canvas.width / 20 * 9 - 50, 640, this.missles), new City(this.canvas, this.canvas.width - (this.canvas.width / 20 * 7) - 150, 650), new City(this.canvas, this.canvas.width - (this.canvas.width / 20 * 4) - 150, 650), new City(this.canvas, this.canvas.width - (this.canvas.width / 20 * 1) - 150, 650)];\r\n        this.elements = [new Ground(this.canvas)];\r\n        this.rockets = [];\r\n        this.planes = [];\r\n        this.explosions = [];\r\n        this.enemies = [];\r\n        this.planeCorpses = [];\r\n        this.drones = [];\r\n        this.color = 0;\r\n        this.counter = 0;\r\n        this.level = 0;\r\n        this.eventlistiners();\r\n        this.nextWave();\r\n        this.sounds();\r\n        requestAnimationFrame(() => { this.draw(); });\r\n    }\r\n    resize() {\r\n        this.canvas.width = 1536;\r\n        this.canvas.height = 746;\r\n        console.log(window.innerWidth, window.innerHeight);\r\n        console.log('resized');\r\n    }\r\n    sounds() {\r\n    }\r\n    eventlistiners() {\r\n        document.addEventListener('keypress', e => {\r\n            if (e.key == ' ' && !this.cities[3].destroyed) {\r\n                if (this.missles > 0) {\r\n                    console.log(this.missles);\r\n                    this.rockets.push(new Rocket(this.canvas, this.crosshair.x + 7, this.crosshair.y + 7));\r\n                    this.missles -= 1;\r\n                    this.usedMissles += 1;\r\n                    this.cities[3].update(this.missles);\r\n                    if (this.missles == 0 && this.usedMissles < 60) {\r\n                        setTimeout(() => {\r\n                            this.missles = 6;\r\n                            this.cities[3].update(6);\r\n                        }, 2000);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    nextLevel() {\r\n        this.level++;\r\n        this.counter = 0;\r\n        this.missles = 6;\r\n        this.speed += 0.3;\r\n        let cities = 0;\r\n        this.cities.forEach(e => {\r\n            if (!e.destroyed) {\r\n                this.points += 200 * (this.level);\r\n                cities++;\r\n            }\r\n        });\r\n        if (this.usedMissles < 60) {\r\n            this.points += (60 - this.usedMissles) * 25 * this.level;\r\n        }\r\n        if (!this.cities[3].destroyed) {\r\n            cities -= 1;\r\n        }\r\n        if (cities == 0) {\r\n            this.message = 'You lost';\r\n            this.lost = true;\r\n        }\r\n        else {\r\n            this.cities[3].update(6);\r\n            this.cities[3].city.src = '../src/assets/base.png';\r\n            this.cities[3].destroyed = false;\r\n            this.message = 'Level Compleated';\r\n            let str = String((cities * 200) + ((60 - this.usedMissles) * 25) * this.level);\r\n            setTimeout(() => {\r\n                this.message = '';\r\n            }, 1000);\r\n            setTimeout(() => {\r\n                var audio = new Audio('../src/assets/roll-up-2.mp3');\r\n                audio.play();\r\n                this.message = str + ' Bonus Points';\r\n            }, 2000);\r\n            setTimeout(() => {\r\n                this.message = '';\r\n            }, 3000);\r\n            setTimeout(() => {\r\n                this.message = 'x ' + String(this.level + 1) + ' Points';\r\n            }, 4000);\r\n            setTimeout(() => {\r\n                this.message = '';\r\n            }, 5000);\r\n            setTimeout(() => {\r\n                this.message = 'Level ' + String(this.level + 1);\r\n            }, 6000);\r\n            setTimeout(() => {\r\n                this.message = '';\r\n            }, 7000);\r\n            this.usedMissles = 0;\r\n        }\r\n    }\r\n    nextWave() {\r\n        let chances = [[30, 65, 100], [30, 65, 90], [30, 60, 85], [30, 50, 75], [30, 50, 75], [30, 50, 75], [30, 50, 75], [30, 50, 75], [30, 50, 75], [30, 50, 75], [30, 50, 75], [30, 50, 75], [30, 50, 75], [30, 50, 75], [30, 50, 75], [30, 50, 75]];\r\n        let attack = Math.floor(Math.random() * 100);\r\n        if (attack < chances[this.level][0]) {\r\n            let pos = Math.random() * this.canvas.width;\r\n            let target = Math.floor(Math.random() * 5);\r\n            this.enemies.unshift(new Enemy(this.canvas, 'fast', pos, 0, target, this.speed));\r\n            this.enemies.unshift(new Enemy(this.canvas, 'fast', pos + 100, 0, target + 1, this.speed));\r\n            this.enemies.unshift(new Enemy(this.canvas, 'fast', pos + 200, 0, target + 2, this.speed));\r\n        }\r\n        else if (attack < chances[this.level][1]) {\r\n            let pos = Math.random() * 800 + 100;\r\n            let target = Math.floor(Math.random() * 4);\r\n            this.enemies.unshift(new Enemy(this.canvas, 'rocket', Math.random() * this.canvas.width, 0, Math.floor(Math.random() * 7), this.speed));\r\n            this.enemies.unshift(new Enemy(this.canvas, 'cluster', Math.random() * this.canvas.width, 0, Math.floor(Math.random() * 7), this.speed));\r\n            this.enemies.unshift(new Enemy(this.canvas, 'rocket', Math.random() * this.canvas.width, 0, Math.floor(Math.random() * 7), this.speed));\r\n            this.enemies.unshift(new Enemy(this.canvas, 'rocket', Math.random() * this.canvas.width, 0, Math.floor(Math.random() * 7), this.speed));\r\n        }\r\n        else if (attack < chances[this.level][2]) {\r\n            if (Math.floor(Math.random() * 2) == 0) {\r\n                if (Math.floor(Math.random() * 2) == 0) {\r\n                    this.planes.unshift(new Plane(this.canvas, 'plane', 0, Math.random() * this.canvas.height / 2 + this.canvas.height / 4 - 100, this.speed));\r\n                }\r\n                else {\r\n                    this.planes.unshift(new Plane(this.canvas, 'plane', this.canvas.width, Math.random() * this.canvas.height / 2 + this.canvas.height / 4 - 100, this.speed));\r\n                }\r\n            }\r\n            else {\r\n                if (Math.floor(Math.random() * 2) == 0) {\r\n                    this.planes.unshift(new Plane(this.canvas, 'covid', 0, Math.random() * this.canvas.height / 2 + this.canvas.height / 4 - 100, this.speed));\r\n                }\r\n                else {\r\n                    this.planes.unshift(new Plane(this.canvas, 'covid', this.canvas.width, Math.random() * this.canvas.height / 2 + this.canvas.height / 4 - 100, this.speed));\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.drones.unshift(new Drone(this.canvas, Math.random() * this.canvas.width, 0, Math.floor(Math.random() * 7), this.speed));\r\n            this.drones.unshift(new Drone(this.canvas, Math.random() * this.canvas.width, 0, Math.floor(Math.random() * 7), this.speed));\r\n        }\r\n    }\r\n    draw() {\r\n        if (this.counter % 480 == 0 && this.counter < 3000) {\r\n            this.nextWave();\r\n        }\r\n        if (this.counter > 3000 && this.enemies.length == 0 && this.drones.length == 0 && this.planes.length == 0) {\r\n            this.nextLevel();\r\n            console.log('next level');\r\n        }\r\n        if (this.counter % 5 == 0) {\r\n            this.color++;\r\n            if (this.color == 4) {\r\n                this.color = 0;\r\n            }\r\n        }\r\n        //ruch celownika\r\n        this.crosshair.movemeant();\r\n        //tło\r\n        this.ctx.fillStyle = \"black\";\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n        //explozje\r\n        this.explosions.forEach((item, index, object) => {\r\n            if (item.delete) {\r\n                object.splice(index, 1);\r\n            }\r\n            else {\r\n                item.draw(this.ctx, this.color);\r\n            }\r\n        });\r\n        //kolizje\r\n        this.drones.forEach(e => {\r\n            e.check(this.ctx);\r\n        });\r\n        this.enemies.forEach(e => {\r\n            e.check(this.ctx);\r\n        });\r\n        this.planes.forEach(e => {\r\n            e.check(this.ctx);\r\n        });\r\n        //tło\r\n        // let colors=['black','gray']\r\n        this.ctx.fillStyle = 'black';\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n        //pasywne elementy\r\n        this.elements.forEach(e => {\r\n            e.draw(this.ctx);\r\n        });\r\n        //miasta\r\n        this.cities.forEach(e => {\r\n            e.draw(this.ctx);\r\n        });\r\n        //twoje rakiety\r\n        this.rockets.forEach((item, index, object) => {\r\n            item.draw(this.ctx);\r\n            if (item.state == 'stop') {\r\n                this.explosions.push(new Explosion(this.canvas, item.endX, item.endY));\r\n                object.splice(index, 1);\r\n            }\r\n        });\r\n        //wrogowie\r\n        this.enemies.forEach((item, index, object) => {\r\n            if (item.active) {\r\n                item.draw(this.ctx);\r\n                if (item.split) {\r\n                    var audio = new Audio('../src/assets/missile-2.mp3');\r\n                    audio.play();\r\n                    item.splited = true;\r\n                    item.split = false;\r\n                    if (item.target < 3) {\r\n                        this.enemies.unshift(new Enemy(this.canvas, 'rocket', item.x, item.y, item.target + 1, this.speed));\r\n                        this.enemies.unshift(new Enemy(this.canvas, 'fast', item.x, item.y, item.target + 2, this.speed));\r\n                        this.enemies.unshift(new Enemy(this.canvas, 'rocket', item.x, item.y, item.target + 3, this.speed));\r\n                    }\r\n                    else {\r\n                        this.enemies.unshift(new Enemy(this.canvas, 'rocket', item.x, item.y, item.target - 1, this.speed));\r\n                        this.enemies.unshift(new Enemy(this.canvas, 'fast', item.x, item.y, item.target - 2, this.speed));\r\n                        this.enemies.unshift(new Enemy(this.canvas, 'rocket', item.x, item.y, item.target - 3, this.speed));\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                object.splice(index, 1);\r\n                if (item.hit == 3 && !this.cities[3].destroyed) {\r\n                    this.explosions.push(new Explosion(this.canvas, item.x, item.y));\r\n                    setTimeout(() => { this.explosions.push(new Explosion(this.canvas, item.x, item.y + 40)); }, 1000);\r\n                    this.cities[item.hit].destroy();\r\n                }\r\n                else {\r\n                    this.explosions.push(new Explosion(this.canvas, item.x, item.y));\r\n                    if (item.hit != -1) {\r\n                        this.cities[item.hit].destroy();\r\n                    }\r\n                    else {\r\n                        this.points += 25 * (this.level + 1);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        //samoloty\r\n        this.planes.forEach((item, index, object) => {\r\n            item.draw(this.ctx);\r\n            if (item.active) {\r\n                if (Math.floor(Math.random() * 1000) == 1) {\r\n                    this.enemies.unshift(new Enemy(this.canvas, 'rocket', item.x - 10, item.y - 28, Math.floor(Math.random() * 7), this.speed));\r\n                    this.enemies.unshift(new Enemy(this.canvas, 'rocket', item.x - 10, item.y - 28, Math.floor(Math.random() * 7), this.speed));\r\n                }\r\n                else if (Math.floor(Math.random() * 1000) == 2) {\r\n                    this.enemies.unshift(new Enemy(this.canvas, 'fast', item.x - 10, item.y - 28, Math.floor(Math.random() * 7), this.speed));\r\n                }\r\n                if (item.x > this.canvas.width + 200) {\r\n                    object.splice(index, 1);\r\n                }\r\n            }\r\n            else {\r\n                object.splice(index, 1);\r\n                this.points += 100 * (this.level + 1);\r\n                if (item.type != 'covid') {\r\n                    this.planeCorpses.push(new PlaneCorpse(this.canvas, item.x, item.y, item.reverse));\r\n                    this.explosions.push(new Explosion(this.canvas, item.x - 25, item.y - 25));\r\n                }\r\n                else {\r\n                    this.explosions.push(new Explosion(this.canvas, item.x - 25, item.y - 25));\r\n                }\r\n            }\r\n        });\r\n        this.planeCorpses.forEach((item, index, object) => {\r\n            item.draw(this.ctx);\r\n            if (!item.active) {\r\n                object.splice(index, 1);\r\n            }\r\n        });\r\n        //drony\r\n        this.drones.forEach((item, index, object) => {\r\n            item.draw(this.ctx);\r\n            if (!item.active) {\r\n                object.splice(index, 1);\r\n                if (item.hit == 3 && !this.cities[3].destroyed) {\r\n                    this.explosions.push(new Explosion(this.canvas, item.x + 20, item.y));\r\n                    setTimeout(() => { this.explosions.push(new Explosion(this.canvas, item.x + 20, item.y + 40)); }, 1000);\r\n                    this.cities[item.hit].destroy();\r\n                }\r\n                else {\r\n                    this.explosions.push(new Explosion(this.canvas, item.x + 18, item.y + 9));\r\n                    if (item.hit != -1) {\r\n                        this.cities[item.hit].destroy();\r\n                    }\r\n                    else {\r\n                        this.points += 250 * (this.level + 1);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        //explozje\r\n        this.explosions.forEach((item, index, object) => {\r\n            if (item.delete) {\r\n                object.splice(index, 1);\r\n            }\r\n            else {\r\n                item.draw(this.ctx, this.color);\r\n            }\r\n        });\r\n        //celownik\r\n        this.crosshair.draw(this.ctx);\r\n        this.ctx.font = \"30px Comic Sans MS\";\r\n        this.ctx.fillStyle = \"red\";\r\n        this.ctx.fillText('Points: ' + String(this.points), 300, 50);\r\n        this.ctx.fillText('Ammo:' + String(60 - this.usedMissles), 100, 50);\r\n        this.ctx.font = \"60px Comic Sans MS\";\r\n        this.ctx.fillStyle = \"red\";\r\n        this.ctx.textAlign = \"center\";\r\n        this.ctx.fillText(this.message, this.canvas.width / 2, this.canvas.height / 2 - 100);\r\n        if (!this.lost) {\r\n            requestAnimationFrame(() => { this.draw(); });\r\n        }\r\n        this.counter++;\r\n    }\r\n}\r\nnew src_Game();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);